# ServerProperties
server.port=8080
server.servlet.context-path=/community

# datasource config
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/community?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
spring.datasource.username=root
spring.datasource.password=Owh@123456

# datasource pool config 连接池
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=30000

# 配置日志
#mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

# 配置逻辑删除
#mybatis-plus.global-config.db-config.logic-delete-field=deleted
#mybatis-plus.global-config.db-config.logic-delete-value=1
#mybatis-plus.global-config.db-config.logic-not-delete-value=0

# mybatis config

mybatis.mapper-locations=classpath:mapper/*.xml
mybatis.type-aliases-package=com.ouweihao.community.entity
mybatis.configuration.useGeneratedKeys=true
mybatis.configuration.mapUnderscoreToCamelCase=true
# 配置mybatis的日志输出
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
# 整合thymeleaf
# ThymeleafProperties --- 对应的配置类
spring.thymeleaf.cache=false
#logger
# 设置日志级别，高于debug级别的日志才会被记录
#logging.level.com.ouweihao.community = debug
#logging.file.name=log/community-dev.log
##  详情见MailProperties
spring.mail.host=smtp.163.com
spring.mail.port=465
spring.mail.username=otestcomm@163.com
spring.mail.password=SBDVZLVIIYBGKFST
# smptps 最后的s代表安全的协议
spring.mail.protocol=smtps
# 开启ssl安全连接
spring.mail.properties.mail.smtp.ssl.enable=true
## community
community.path.domain=http://localhost:8080
community.path.upload=e:/IntellijIDEA/bishe/data/upload
# editorMd 上传的图片的存储路径
community.path.Imgupload=e:/IntellijIDEA/bishe/data/upload/editormdUpload
# 设置图片大小上限
# 设置上传文件的大小
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=500MB
## 配置redis，详情见RedisProperties
# 数据存在那个库中，默认有12个库
spring.redis.database=11
spring.redis.host=localhost
spring.redis.port=6379
## 配置kafka，详情见Kafkaproperties
spring.kafka.bootstrap-servers=localhost:9092
# 设置消费者组
spring.kafka.consumer.group-id=community-consumer-group
# 是否允许自动提交
spring.kafka.consumer.enable-auto-commit=true
# 自动提交间隔，单位ms
spring.kafka.consumer.auto-commit-interval=3000
## ElasticSearchProperties
spring.data.elasticsearch.cluster-name=ouweihao
# 先查询IP地址再填入
spring.data.elasticsearch.cluster-nodes=192.168.115.1:9300
#spring.data.elasticsearch.cluster-nodes=127.0.0.1:9300
## spring提供的简单线程池，详情见TaskExecutionProperties
# 核心线程数量
spring.task.execution.pool.core-size=5
# 最大线程数量
spring.task.execution.pool.max-size=15
# 等待队列最大容量，用于充当缓冲
spring.task.execution.pool.queue-capacity=100
## spring可执行定时任务线程池，详情见TaskSchedulingProperties
# 线程池数量，可以提前预判，由程序自身启动
spring.task.scheduling.pool.size=5
## Quartz配置 详情见QuartzProperties类
# 任务存储的方式
spring.quartz.job-store-type=jdbc
# 调度器的名字
spring.quartz.scheduler-name=CommunityScheduler
# 调度器ID：自动生成
spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO
# 任务存储到数据库时使用哪个类进行存储
spring.quartz.properties.org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
# 存储时使用的JDBC驱动
spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
# 是否是集群的方式
spring.quartz.properties.org.quartz.jobStore.isClustered=true
# 使用的是哪个线程池
spring.quartz.properties.org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
# 线程池的线程数量
spring.quartz.properties.org.quartz.threadPool.threadCount=5
## wk(wkhtmltopdf)
wk.image.commend=D:/wkhtmltopdf/bin/wkhtmltoimage
wk.image.storage=E:/IntellijIDEA/bishe/data/wk-images/

